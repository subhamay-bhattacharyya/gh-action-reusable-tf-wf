name: Terraform Plan

on:
  workflow_call:
    inputs:
      github-env:
        description: 'Specifies the GitHub deployment environment.'
        required: false
        type: string
        default: "devl"
      terraform-ver:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      tfvar-file:
        description: 'Specifies the environment specific tfvar file e.g: devl.terraform.tfvars'
        required: true
        type: string
        default: devl.terraform.tfvars
      issue-number:
        description: 'Specifies the GitHub Issue Number.'
        required: true
        type: string
      aws-region:
        description: 'Specifies the AWS Region.'
        required: true
        type: string
      aws-role-arn:
        description: 'Specifies the AWS IAM Role arn.'
        required: true
        type: string
      aws-tf-state-bucket-name:
        description: 'Specifies the AWS S3 bucket name.'
        required: true
        type: string
    outputs:
      issue-number:
        description: "Issue id associated with the feature branch"
        value: ${{ jobs.plan.outputs.issue-number }}
permissions:
  id-token: write # This is required for aws oidc connection
  contents: read # This is required for actions/checkout
  pull-requests: write # This is required for gh bot to comment PR
 
jobs:
  plan:
    name: "TF Plan (${{ inputs.github-env }})"
    outputs:
      ci-build: ${{ steps.get-ci-build-string.outputs.ci-build }}
      tf-plan: ${{ steps.plan.outputs.tf-plan }}
      issue-number: ${{ steps.pass-issue-number.outputs.issue-number }}
      # change-detected: ${{ steps.drift-check.outputs.change-detected }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.github-env }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Print and issue number to next step
        id: pass-issue-number
        run: |
          echo "issue-number: ${{ inputs.issue-number }}"
          echo "issue-number=`echo ${{ inputs.issue-number }}`" >> $GITHUB_OUTPUT

      - name: Git checkout
        id: git-checkout
        uses: actions/checkout@v4

      - name: Create the CiBuild string
        if: startsWith(github.ref, 'refs/heads/feature')
        id: get-ci-build-string
        run: |
          echo "ci-build=`echo ${{ github.ref_name }}|sed s'/\//-/g'|head -c 15| \
          tr [:upper:] [:lower:]`-`echo ${{ github.sha }}|base64|head -c 4|tr [:upper:] [:lower:]`" >> $GITHUB_OUTPUT 

      - name: Add GitHub attributes to terraform.tfvars file
        id: add-github-attributes
        run: |
          cd tf
          mv params/${{ inputs.tfvar-file }} terraform.tfvars
          echo -e '######################################## GitHub Context Variables  #################################'>> terraform.tfvars 
          echo -e 'github-url           = "${{ github.repositoryUrl }}"'                                                >> terraform.tfvars 
          echo -e 'github-ref           = "${{ github.ref }}"'                                                          >> terraform.tfvars 
          echo -e 'github-sha           = "${{ github.sha }}"'                                                          >> terraform.tfvars 
          # echo -e 'github-wf-run-num  = "${{ github.run_number }}"'                                                   >> terraform.tfvars 
          echo -e 'github-repo          = "${{ github.event.repository.name }}"'                                        >> terraform.tfvars
          echo "=========================================== terraform.tfvars ==========================================="
          cat terraform.tfvars 

      - name: Add CiBuild
        if: startsWith(github.ref, 'refs/heads/feature')
        id: add-ci-build
        run: |
          echo -e 'ci_build             = "-${{ steps.get-ci-build-string.outputs.ci-build }}"'                         >> tf/terraform.tfvars
          echo "=========================================== terraform.tfvars ==========================================="
          cat tf/terraform.tfvars 

      - name: Configure AWS credentials from AWS account
        id: aws-config
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ inputs.aws-role-arn }}
          aws-region: ${{ inputs.aws-region }}
          role-session-name: github-aws-terraform-oidc

      - name: Configure and cache Terraform plugin
        id: plugin
        uses: subhamay-bhattacharyya/9996-tf-plugin@main
        with:
          tf-version: ${{ inputs.terraform-ver }}
          caching: 'true'

      - name: Output Cache used
        id: cache-used
        run: echo "Cache used? ${{ steps.plugin.outputs.used-cache }}"

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ inputs.aws-tf-state-bucket-name }}
          AWS_BUCKET_KEY_NAME: ${{ github.event.repository.name }}
        run: |
          cd ${{ github.workspace }}/tf
          terraform fmt
          terraform init -backend-config="bucket=${{ inputs.aws-tf-state-bucket-name }}" -backend-config="key=${{ github.event.repository.name }}/terraform.tfstate" -backend-config="region=${{ inputs.aws-region }}"

      - name: Terraform fmt check
        id: format
        run: |
          cd ${{ github.workspace }}/tf
          terraform fmt -check
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ github.workspace }}/tf
          terraform plan -out=plan.tfplan -var-file=terraform.tfvars -no-color
          terraform show -json plan.tfplan > plan.json

      - name: Terraform Plan Status
        id: plan-status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest

      - name: Run OPA Tests - S3 Bucket Versioning
        run: |
          cd ${{ github.workspace }}/tf/
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -s https://gist.githubusercontent.com/bsubhamay/8634114fe68e95c3c0b4967ab1522c32/raw > s3_bucket_versioning.rego
          echo "=========================================== s3_bucket_versioning.rego ==========================================="
          cat s3_bucket_versioning.rego
          echo "================================================================================================================="

          opaout=$(opa eval --data s3_bucket_versioning.rego --input /tmp/plan.json "data.s3versioning.deny" | jq -r '.result[].expressions[].value[]')
          echo "opaout=$opaout"